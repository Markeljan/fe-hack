struct Approval {
    #indexed
    pub owner: address
    #indexed
    pub spender: address
    #indexed
    pub tokenId: u256
}

struct Transfer {
    #indexed
    pub from: address
    #indexed
    pub to: address
    #indexed
    pub tokenId: u256
}

contract ERC721 {
    _token_id_to_owner: Map<u256, address>
    _allowances: Map<address, Map<address, u256>>
    _total_supply: u256
    _name: String<100>
    _symbol: String<100>
    _current_token_id: u256
    
    pub fn __init__(mut self, mut ctx: Context) {
        self._name = "fe-lang NFT"
        self._symbol = "FENFT"
        self.mint(ctx)
    }

    pub fn name(self) -> String<100> {
        return self._name.to_mem()
    }

    pub fn symbol(self) -> String<100> {
        return self._symbol.to_mem()
    }

    pub fn totalSupply(self) -> u256 {
        return self._total_supply
    }

    pub fn ownerOf(self, tokenId: u256) -> address {
        return self._token_id_to_owner[tokenId]
    }

    pub fn mint(mut self, mut ctx: Context) -> u256 {
        self._current_token_id = self._current_token_id + 1
        self._mint(ctx, account: ctx.msg_sender(), tokenId: self._current_token_id)
        return self._current_token_id
    }

    pub fn transfer(mut self, mut ctx: Context, recipient: address, tokenId: u256) -> bool {
        assert self._token_id_to_owner[tokenId] == ctx.msg_sender()
        self._transfer(ctx, sender: ctx.msg_sender(), recipient, tokenId)
        return true
    }

    pub fn allowance(self, owner: address, spender: address) -> u256 {
        return self._allowances[owner][spender]
    }

    pub fn approve(mut self, mut ctx: Context, spender: address, tokenId: u256) -> bool {
        assert self._token_id_to_owner[tokenId] == ctx.msg_sender()
        self._approve(ctx, owner: ctx.msg_sender(), spender, tokenId)
        return true
    }

    pub fn transferFrom(mut self, mut ctx: Context, sender: address, recipient: address, tokenId: u256) -> bool {
        assert self._token_id_to_owner[tokenId] == sender
        assert self._allowances[sender][ctx.msg_sender()] == tokenId
        self._transfer(ctx, sender, recipient, tokenId)
        self._approve(ctx, owner: sender, spender: ctx.msg_sender(), tokenId: 0)
        return true
    }

    fn _transfer(mut self, mut ctx: Context, sender: address, recipient: address, tokenId: u256) {
        assert sender != 0
        assert recipient != 0
        _before_token_transfer(from: sender, to: recipient, tokenId)
        self._token_id_to_owner[tokenId] = recipient
        ctx.emit(Transfer(from: sender, to: recipient, tokenId))
    }

    fn _mint(mut self, mut ctx: Context, account: address, tokenId: u256) {
        assert account != address(0)
        assert self._token_id_to_owner[tokenId] == address(0)
        _before_token_transfer(from: address(0), to: account, tokenId)
        self._total_supply = self._total_supply + 1
        self._token_id_to_owner[tokenId] = account
        ctx.emit(Transfer(from: address(0), to: account, tokenId))
    }

    fn _burn(mut self, mut ctx: Context, tokenId: u256) {
        let owner: address = self._token_id_to_owner[tokenId]
        assert owner != address(0)
        _before_token_transfer(from: owner, to: address(0), tokenId)
        self._token_id_to_owner[tokenId] = address(0)
        ctx.emit(Transfer(from: owner, to: address(0), tokenId))
    }

    fn _approve(mut self, mut ctx: Context, owner: address, spender: address, tokenId: u256) {
        assert owner != address(0)
        assert spender != address(0)
        self._allowances[owner][spender] = tokenId
        ctx.emit(Approval(owner, spender, tokenId))
    }

    fn _before_token_transfer(from: address, to: address, tokenId: u256) {}
}